import net.vivin.gradle.versioning.tasks.TagTask

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.4"
        classpath "gradle.plugin.net.vivin:gradle-semantic-build-versioning:2.0.1"
    }
}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'net.vivin.gradle-semantic-build-versioning'

group 'net.vivin'
project.version.with {
    startingVersion = "1.1.2"
}

tasks.withType(TagTask) {
    it.dependsOn publishPlugins
}
publishPlugins.dependsOn build

repositories {
    jcenter()
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'java-gradle-plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

task createPluginClasspathFile {
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir "$temporaryDir"
} << {
    file("$temporaryDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
}

configurations {
    jacocoRuntime
}

task createJacocoAgentClasspathFile {
    inputs.files configurations.jacocoRuntime
    outputs.dir "$temporaryDir"
} << {
    def jacocoAgentClasspathFile = file("$temporaryDir/jacoco-agent-classpath.txt")
    jacocoAgentClasspathFile.text = """|${configurations.jacocoRuntime.asPath}
                                       |${test.jacoco.destinationFile.absolutePath}""".stripMargin()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'
    compile 'org.codehaus.groovy:groovy-all:2.4.4'

    testCompile 'org.eclipse.jgit:org.eclipse.jgit.junit:4.4.0.201606070830-r'
    testCompile 'org.jmockit:jmockit:1.28'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

    jacocoRuntime "org.jacoco:org.jacoco.agent:$jacoco.toolVersion:runtime"

    testRuntime files(createPluginClasspathFile)
    testRuntime files(createJacocoAgentClasspathFile)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

// this is useful for better coverage values
// it should not be used for a final production build
if(project.hasProperty('disableGroovyOptimizations')) {
    compileGroovy {
        inputs.property 'disableGroovyOptimizations', project.hasProperty('disableGroovyOptimizations')
        groovyOptions.optimizationOptions.all = false
    }
}

test {
    jacoco.includes = ['net.vivin.gradle.versioning.*']
    finalizedBy jacocoTestReport
    doFirst {
        delete jacoco.destinationFile
    }
}

pluginBundle {
    website = 'https://github.com/vivin/gradle-semantic-build-versioning'
    vcsUrl = 'https://github.com/vivin/gradle-semantic-build-versioning'
    description = 'This is a gradle plugin that provides support for semantic versioning of builds. It is quite easy to use and extremely configurable. The plugin allows you to bump the major, minor, and patch version based on the latest version, which is identified from a git tag. It also allows you to bump pre-release versions based on a scheme that you define. The version can be bumped by using version-component-specific tasks or can be bumped automatically based on the contents of a commit message. If no tasks from the plugin are specifically invoked, the plugin will increment the version-component with the lowest precedence; this is usually the patch version, but can be the pre-release version if the latest version is a pre-release one.'
    tags = ['versioning', 'semantic-versioning', 'git', 'build-versioning', 'auto-versioning', 'version']

    plugins {
        semanticBuildVersioningPlugin {
            id = 'net.vivin.gradle-semantic-build-versioning'
            displayName = 'Gradle Semantic Build Versioning Plugin'
        }
    }
}

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            groupId project.group
            artifactId 'gradle-semantic-build-versioning'
            version project.version
        }
    }
}
